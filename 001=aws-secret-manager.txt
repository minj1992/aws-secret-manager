1. Create a Secret in AWS Secrets Manager
Steps:
1.	Sign in to the AWS Management Console → Secrets Manager → Store a new secret.
2.	Secret type: Choose Other type of secret (or choose Credentials for IAM user if applicable).
3.	Key/value pairs: Add at least one key-value pair. Example:
Key	Value
username	testuser
password	InitialPass123
4.	Click Next.
5.	Secret name: Enter /sample/test/value5.
6.	Click Next → Skip automatic rotation for now (we’ll configure it later).
7.	Click Store.
The secret ARN will look like:
arn:aws:secretsmanager:us-east-1:<account-id>:secret:/sample/test/value5-xxxxxx
________________________________________
2. Create the Rotation Lambda Function
We need a Lambda function to generate a strong password and rotate the secret automatically.
Steps:
1.	Go to AWS Lambda → Create function.
2.	Function name: value3
3.	Runtime: Python 3.9+ (or latest Python version)
4.	Permissions: Create a new role with basic Lambda permissions. (We’ll add Secrets Manager permissions next.)
5.	Click Create function.
________________________________________
2.1 Add Permissions for the Lambda
Lambda needs permission to read/write Secrets Manager secrets.
1.	Go to your Lambda → Configuration → Permissions → Role Name → Attach policies.
2.	Attach AWS managed policy SecretsManagerReadWrite OR create a custom inline policy:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecretVersionStage"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
________________________________________
2.2 Allow Secrets Manager to invoke Lambda
1.	Go to Lambda → Configuration → Permissions → Add permissions → Grant permissions to another AWS service.
2.	Service: Secrets Manager
3.	Action: lambda:InvokeFunction
4.	Source ARN: The ARN of the secret you want to rotate, e.g.,
arn:aws:secretsmanager:us-east-1:<account-id>:secret:/sample/test/value5-xxxxxx
5.	Give a unique statement ID, e.g., AllowSecretsManagerInvoke.
________________________________________
2.3 Add Lambda code
Replace the Lambda code with the following:
import random
import string
import re
import boto3
import json

def generate_strong_password():
    upper = string.ascii_uppercase
    lower = string.ascii_lowercase
    digits = string.digits
    special = "@#$%^&*_-+="
    all_chars = upper + lower + digits + special

    while True:
        password = ''.join(random.choice(all_chars) for _ in range(16))
        categories = sum([
            any(c in upper for c in password),
            any(c in lower for c in password),
            any(c in digits for c in password),
            any(c in special for c in password)
        ])
        if categories < 3:
            continue
        if re.search(r'(.)\1\1', password):
            continue
        return password

def lambda_handler(event, context):
    client = boto3.client('secretsmanager')
    secret_id = event['SecretId']
    token = event['ClientRequestToken']

    # Generate new password
    new_password = generate_strong_password()

    # Store in AWSPENDING
    client.put_secret_value(
        SecretId=secret_id,
        ClientRequestToken=token,
        SecretString=json.dumps({"password": new_password})
    )

    # Mark as AWSCURRENT
    client.update_secret_version_stage(
        SecretId=secret_id,
        VersionStage='AWSCURRENT',
        MoveToVersionId=token,
        RemoveFromVersionId=event.get('PreviousVersionId', '')
    )

    return {"status": "success"}
This Lambda generates a unique strong password every rotation, with no hardcoded values.
________________________________________
3. Enable Rotation on the Secret
1.	Go to Secrets Manager → your secret /sample/test/value5 → Rotation → Edit rotation.
2.	Enable automatic rotation.
3.	Rotation Lambda: Select value3.
4.	Rotation schedule: Use rate(4 hours) (or whatever frequency you want).
For testing, you can also rotate immediately after configuration.
5.	Save changes.
________________________________________
4. Trigger Immediate Rotation (Testing)
Use AWS CLI to rotate immediately:
aws secretsmanager rotate-secret --secret-id /sample/test/value5
If you get A previous rotation isn’t complete:
1.	List secret versions:
aws secretsmanager describe-secret --secret-id /sample/test/value5
2.	Remove the stuck AWSPENDING version:
aws secretsmanager update-secret-version-stage `
  --secret-id /sample/test/value5 `
  --remove-from-version-id <AWSPENDING_VERSION_ID> `
  --version-stage AWSPENDING
3.	Retry rotation.
________________________________________
5. Verify New Password
After successful rotation:
aws secretsmanager get-secret-value --secret-id /sample/test/value5
Output will include a new password:
{
  "ARN": "arn:aws:secretsmanager:us-east-1:<account-id>:secret:/sample/test/value5-xxxxxx",
  "Name": "/sample/test/value5",
  "SecretString": "{\"password\": \"NEW_GENERATED_PASSWORD\"}",
  "VersionId": "<new-version-id>",
  "VersionStages": ["AWSCURRENT"]
}
________________________________________
6. CloudWatch Logs (Optional but Recommended)
1.	Each Lambda execution automatically logs to CloudWatch: /aws/lambda/value3.
2.	Check logs for success/failure:
aws logs describe-log-streams --log-group-name /aws/lambda/value3 --order-by LastEventTime --descending
aws logs get-log-events --log-group-name /aws/lambda/value3 --log-stream-name <latest-log-stream-name>
________________________________________
✅ Summary of Key Points
•	Always ensure Lambda has proper Secrets Manager permissions.
•	Allow Secrets Manager service principal to invoke Lambda.
•	If rotation fails, check for stuck AWSPENDING versions and clear them.
•	CloudWatch logs are essential for debugging rotation failures.
•	Your Lambda must write the new value and mark it as AWSCURRENT — otherwise rotation won’t succeed.


advance testing from build to test 



AWS Secrets Rotation Test Lab Architecture
1. Components Diagram
┌─────────────────────┐
│   AWS Secrets       │
│  Manager Secrets    │
│  /sample/test/value*│
└─────────┬───────────┘
          │ rotation enabled
          │ triggers
          ▼
┌─────────────────────┐
│  AWS Lambda Function│
│       value3        │
│ Generates strong    │
│ passwords automatically
│ Updates AWSCURRENT  │
└─────────┬───────────┘
          │ writes log
          ▼
┌─────────────────────┐
│ CloudWatch Logs     │
│ /aws/lambda/value3  │
│ View Lambda output  │
└─────────────────────┘
Flow:
1.	Secrets Manager secret has rotation enabled.
2.	On schedule or manual trigger, it invokes Lambda value3.
3.	Lambda generates a strong password, updates the secret in AWSPENDING, and marks it as AWSCURRENT.
4.	Logs are available in CloudWatch.
________________________________________
2. Lambda Function Code (value3)
This is the same fully automated code without hardcoded values:
import random
import string
import re
import boto3
import json

def generate_strong_password():
    upper = string.ascii_uppercase
    lower = string.ascii_lowercase
    digits = string.digits
    special = "@#$%^&*_-+="
    all_chars = upper + lower + digits + special

    while True:
        password = ''.join(random.choice(all_chars) for _ in range(16))
        categories = sum([
            any(c in upper for c in password),
            any(c in lower for c in password),
            any(c in digits for c in password),
            any(c in special for c in password)
        ])
        if categories < 3:
            continue
        if re.search(r'(.)\1\1', password):
            continue
        return password

def lambda_handler(event, context):
    client = boto3.client('secretsmanager')
    secret_id = event['SecretId']
    token = event['ClientRequestToken']

    # Generate new password
    new_password = generate_strong_password()

    # Store in AWSPENDING
    client.put_secret_value(
        SecretId=secret_id,
        ClientRequestToken=token,
        SecretString=json.dumps({"password": new_password})
    )

    # Mark it as AWSCURRENT
    client.update_secret_version_stage(
        SecretId=secret_id,
        VersionStage='AWSCURRENT',
        MoveToVersionId=token,
        RemoveFromVersionId=event.get('PreviousVersionId', '')
    )

    return {"status": "success"}
________________________________________
3. PowerShell Script to Create Multiple Test Secrets and Attach Lambda
This script will:
•	Create multiple secrets (/sample/test/value1, /sample/test/value2, etc.)
•	Enable rotation for each secret using Lambda value3
•	Trigger immediate rotation
# Set variables
$Secrets = @("/sample/test/value1","/sample/test/value2","/sample/test/value3","/sample/test/value4","/sample/test/value5")
$LambdaArn = "arn:aws:lambda:us-east-1:525390917474:function:value3"

foreach ($SecretName in $Secrets) {
    Write-Host "`nCreating secret $SecretName..."
    
    # Create secret if it doesn't exist
    try {
        aws secretsmanager create-secret --name $SecretName --secret-string '{"username":"testuser","password":"InitPass123"}'
        Write-Host "Secret $SecretName created."
    } catch {
        Write-Host "Secret $SecretName may already exist, skipping creation."
    }

    # Enable rotation
    Write-Host "Enabling rotation for $SecretName..."
    aws secretsmanager rotate-secret --secret-id $SecretName --rotation-lambda-arn $LambdaArn --rotation-rules "AutomaticallyAfterDays=1"
    
    # Trigger immediate rotation
    Write-Host "Triggering immediate rotation for $SecretName..."
    # First, remove pending versions if exist
    $SecretDesc = aws secretsmanager describe-secret --secret-id $SecretName | ConvertFrom-Json
    if ($SecretDesc.VersionIdsToStages.PSObject.Properties.Name -contains $null) {
        Write-Host "No pending version found."
    } else {
        foreach ($VersionId in $SecretDesc.VersionIdsToStages.PSObject.Properties.Name) {
            if ($SecretDesc.VersionIdsToStages.$VersionId -contains "AWSPENDING") {
                Write-Host "Removing pending version $VersionId..."
                aws secretsmanager update-secret-version-stage --secret-id $SecretName --remove-from-version-id $VersionId --version-stage AWSPENDING
            }
        }
    }
    
    # Rotate secret
    aws secretsmanager rotate-secret --secret-id $SecretName
    Write-Host "Rotation triggered for $SecretName."
}

Write-Host "`nAll secrets processed."
________________________________________
4. Verification
After running the script:
1.	List secret values:
aws secretsmanager get-secret-value --secret-id /sample/test/value5
2.	You should see a new generated password for each secret.
3.	Check Lambda logs in CloudWatch:
aws logs describe-log-streams --log-group-name /aws/lambda/value3 --order-by LastEventTime --descending
aws logs get-log-events --log-group-name /aws/lambda/value3 --log-stream-name <latest-log-stream-name>
________________________________________
5. Key Notes
•	No hardcoded passwords: Lambda generates strong passwords automatically.
•	Rotation works for multiple secrets with a single Lambda.
•	Pending versions: Must be cleared before triggering a new rotation.
•	CloudWatch logs help track Lambda executions and errors.
•	Schedule expression: You can modify AutomaticallyAfterDays for production frequency.
Very important iam role 



role 



{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:PutSecretValue",
        "iam:ListAccessKeys",
        "iam:DeleteAccessKey",
        "iam:CreateAccessKey"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}



To remove 
PS C:\Users\devop> aws lambda remove-permission --function-name value3 --statement-id AllowSecretsManagerInvoke


to add
PS C:\Users\devop> aws lambda add-permission `
>>   --function-name value3 `
>>   --statement-id AllowSecretsManagerInvokeAllSecrets `
>>   --action lambda:InvokeFunction `
>>   --principal secretsmanager.amazonaws.com
{
    "Statement": "{\"Sid\":\"AllowSecretsManagerInvokeAllSecrets\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"secretsmanager.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-1:525390917474:function:value3\"}"
}

PS C:\Users\devop>
PS C:\Users\devop> aws lambda get-policy --function-name value3
{
    "Policy": "{\"Version\":\"2012-10-17\",\"Id\":\"default\",\"Statement\":[{\"Sid\":\"AllowSecretsManagerInvokeAllSecrets\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"secretsmanager.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-1:525390917474:function:value3\"}]}",
    "RevisionId": "d9ad93da-ded5-4726-81b1-9d55ccb72f46"
}

